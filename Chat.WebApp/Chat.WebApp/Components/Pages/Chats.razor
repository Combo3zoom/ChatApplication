@rendermode InteractiveServer
@implements IDisposable
@inject NavigationManager NavigationManager
@inject ChatService ChatService

<nav class="flex-column">
    <Virtualize TItem="ChatItem" ItemsProvider="LoadChats">
        <EmptyContent>
            No chats
        </EmptyContent>
        <ChildContent>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> @context.Name
                </NavLink>
            </div>
        </ChildContent>
    </Virtualize>
   
</nav>

@code {
    private string? currentUrl;
    private string searchQuery = string.Empty;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private async ValueTask<ItemsProviderResult<ChatItem>> LoadChats(ItemsProviderRequest request)
    {
        var chats = await ChatService.GetChats(101);

        return new ItemsProviderResult<ChatItem>(chats, chats.Count);
    }
}
